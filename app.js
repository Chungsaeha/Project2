var express = require('express');var app = express();var mysql = require('mysql');var pool = mysql.createPool({	host : 'localhost' ,	user : 'root' ,	database : 'testdb',	password : ''  //보안적으로 심각한 문제가 될 수 있다!});var path = require('path');const ejsLint = require('ejs-lint');var bodyParser = require('body-parser');var flash = require('connect-flash'); //메시지var cookieParser = require('cookie-parser');//쿠키var session = require('express-session');//세션(메모리에 저장하는 기능.)var passport = require('passport');var LocalStrategy = require('passport-local').Strategy;//directory에 접근할때 다음과 같이 사용.app.use('/bower_components', express.static(path.join(__dirname, 'bower_components')));app.use('/css', express.static(path.join(__dirname, 'css')));app.use('/images', express.static(path.join(__dirname, 'images')));app.use('/js', express.static(path.join(__dirname, 'js')));app.use(flash());app.use(bodyParser.urlencoded({ extended: false }));app.use(cookieParser());app.use(session({	secret : '123455@#$@$dffsdf',	resave : false,	saveUninitialized : true,	//세션정보를 DB session table에 넣어줌.}));app.use(passport.initialize()); //Application에 passport등록app.use(passport.session());	//passport이용해서 로그인관련 작업할 때, session을 사용하겠다.//serializeUser 이후에는 계속해서 호출됨. 해당 id값으로 handling//실제 서버로 들어오는 요청마다 세션 정보를 실제 DB의 data와 비교 해당하는 user가 있으면 done의 두번째 인자를//req.user에 저장하고 요청을 처리할 때 유저의 정보를 req.user를 통해 넘겨준다.passport.serializeUser(function(user, done) {// Strategy 성공 시 호출됨.	done(null, user); // 사용자를 식별할 수 있는 값인 user_id을 session에 등록하는 부분.});passport.deserializeUser(function(user, done){	done(null, user);});passport.use('local-login' , new LocalStrategy({		session : true,  //세션에 저장여부	    passReqToCallback: true // req 쓰겠다.	},	function(req, username, password, done){		if(!(req.body.key)) // Client Login		{			pool.getConnection(function(err,connection){				var spl_select = "SELECT * FROM SMP_user WHERE user_id = ?";				connection.query(spl_select, username, function(err, rows){					if(err) 					{						console.log("err:" + err);						return done(err, false);					}					if( rows.length === 0 ){						//회원가입한 사용자가 없을 경우.						return done(null,false,req.flash('loginMessage', '해당 아이디가 존재하지 않습니다.'));					}else{						if( password != rows[0].user_pwd ){							//사용자는 있지만 비밀번호가 일치하지 않을 경우.							return done(null,false,req.flash('loginMessage', '비밀번호가 일치하지 않습니다.'));						}else{							//모두 일치할 경우 로그인가능한 순간.							return done(null, rows);						}					}				});			});		}		else //Admin Login		{			pool.getConnection(function(err,connection){				var spl_select = "SELECT * FROM SMP_ADMIN WHERE admin_id = ?";				connection.query(spl_select, username, function(err, rows){					if(err) 					{						console.log("err:" + err);						return done(err, false);					}					if( rows.length === 0 ){						//회원가입한 사용자가 없을 경우.						return done(null,false,req.flash('loginMessage', '해당 아이디가 존재하지 않습니다.'));					}else{						if( password != rows[0].admin_pwd ){							//사용자는 있지만 비밀번호가 일치하지 않을 경우.							return done(null,false,req.flash('loginMessage', '비밀번호가 일치하지 않습니다.'));						}else{							//모두 일치할 경우 로그인가능한 순간.							return done(null, rows);						}					}				});			});		}	}));/*		ROUTER		*//*		ROUTER		*//*		ROUTER		*//*		ROUTER		*///index pageapp.get('/index', function(req,res){	res.render('index.ejs');});//main pageapp.get('/main', function(req,res){	pool.getConnection(function(err,connection){		var sql_select = "SELECT * FROM SMP_item";		connection.query(sql_select, function(err, rows){			if(err){				console.log("query err:"+err);			}			res.render('main.ejs', {length:rows.length, rows:rows});		})	})});//login page (ajax load)app.get('/main/login', function(req,res){	res.render('main_login.ejs', {error:req.flash('loginMessage')});});app.get('/main/login/client', function(req,res){	res.render('main_login_client.ejs');});app.get('/main/login/admin', function(req,res){	res.render('main_login_admin.ejs');});app.post(	'/main/login', 	passport.authenticate('local-login', {		successRedirect:'/login/success',		failureRedirect:'/main/login',		failureFlash:true	}));//signup pageapp.get('/main/signup', function(req,res){	res.render('main_signup.ejs', {confirm:req.flash('confirm')});});app.post('/main/signup', function(req,res){	var id = req.body.id;	var pwd = req.body.pwd;	var name = req.body.name;	var sex = req.body.sex;	var birth = req.body.year+req.body.month+req.body.date;	var email = req.body.email;	var params = [id, pwd, name, sex, birth, email];	pool.getConnection(function(err,connection){		var spl_insert = "INSERT INTO SMP_user(user_id, user_pwd, user_name, user_sex, user_birth, user_email) VALUES(? , ? , ? , ? , ? , ?)";		connection.query(spl_insert, params, function(err, rows){			if(err){				console.log("query err:"+err);			}			req.flash('loginMessage', '회원가입이 완료되었습니다.')			res.redirect('/main/login');		});	});});//search page (ajax load)app.get('/main/search', function(req,res){	res.render('main_search.ejs');});//mypage page (ajax load)app.get('/main/mypage', function(req,res){	res.render('main_mypage.ejs', {		id:req.user[0].user_id,		name:req.user[0].user_name,		sex:req.user[0].user_sex,		birth:req.user[0].user_birth,		email:req.user[0].user_email	});})//login success pageapp.get('/login/success', function(req,res){	var key = req.user[0].admin_key;	var id = req.user[0].admin_id;	var name_admin = req.user[0].admin_name;	var name_client = req.user[0].user_name;	pool.getConnection(function(err,connection){		if(!key) // client일때,		{			var sql_select = "SELECT * FROM SMP_item";			connection.query(sql_select, function(err,rows){				if(err){ console.log("query err:"+err); }				res.render('main_client.ejs', {name:name_client, length:rows.length, rows:rows});			});		}else{ // admin일때,			var sql_select = "SELECT * FROM SMP_item WHERE admin_id = ?";			connection.query(sql_select, id, function(err,rows){				if(err){ console.log("query err:"+err); }				res.render('main_admin.ejs', {admin:key, name:name_admin, length:rows.length, rows:rows});			});		}	});});//manage page (ajax load)app.get('/manage/stock', function(req,res){	var id = req.user[0].admin_id;	pool.getConnection(function(err,connection){		var sql_select = "SELECT * FROM SMP_item WHERE admin_id=?";		connection.query(sql_select, id, function(err,rows){			if(err) { console.log("query err:"+err); }			res.render('manage_stock.ejs', {rows:rows, length:rows.length, connection:connection});		})	});});app.get('/manage/insert', function(req,res){	res.render('manage_insert.ejs');});app.post('/manage/insert', function(req,res){	var code = req.body.goodsCode;	var type = req.body.goodsTypes;	var id = req.user[0].admin_id;	var name = req.body.goodsName;	var image = req.body.goodsImage;	var comment = req.body.goodsComment;	var stock = req.body.goodsNum;	var color = req.body.goodsColor;	var price = req.body.goodsPrice;		pool.getConnection(function(err,connection){		var params = [code, type, id, name, image, comment, stock, color, price];		var sql_insert = "INSERT INTO SMP_item(item_code, item_type, admin_id, item_name, item_img, item_comment, item_num, item_color, item_price) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)";		connection.query(sql_insert, params, function(err,rows){			if(err){ 				console.log("err:"+err);			}			res.redirect('/login/success');		})	})});//cart pageapp.get('/main/cart', function(req,res){	res.render('main_cart.ejs');});//logout functionapp.get('/logout/client', function(req,res){	req.logout();	res.redirect('/main');});//logout functionapp.get('/logout/admin', function(req,res){	req.logout();	res.redirect('/main');});app.listen(3303, function(){	console.log('Connected, 3303 port');});